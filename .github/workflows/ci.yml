name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:

# Anuluj poprzednie runy tej samej gałęzi/PR
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write     # potrzebne do pushu do GHCR (docker images)

env:
  REGISTRY: ghcr.io
  IMAGE_UI: ${{ github.repository_owner }}/datagenius-ui
  IMAGE_API: ${{ github.repository_owner }}/datagenius-api

jobs:
  lint:
    name: Lint & Type-check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.11 + pip cache
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.6.9 black==24.8.0 mypy==1.11.2

      - name: Ruff (lint)
        run: ruff check .

      - name: Black (format check)
        run: black --check .

      - name: Mypy (type check)
        run: |
          # sprawdź typy w typowych katalogach; pomija jeśli nie istnieją
          PKGS="src backend api chat"
          for p in $PKGS; do [ -d "$p" ] && mypy "$p" || true; done

  test:
    name: Tests (matrix)
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }} + pip cache
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov

      - name: Run tests with coverage (fail if <80%)
        run: |
          pytest -q \
            --maxfail=1 --disable-warnings --strict-markers \
            --cov=. --cov-report=xml --cov-report=term-missing \
            --cov-fail-under=80 \
            --junitxml=pytest-${{ matrix.python-version }}.xml

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.python-version }}
          path: |
            pytest-${{ matrix.python-version }}.xml
            coverage.xml
            .coverage
          if-no-files-found: ignore

  build:
    name: Docker build & (conditional) push
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (UI)
        id: meta_ui
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_UI }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker meta (API)
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build UI image
        uses: docker/build-push-action@v6
        with:
          context: .
          # Multi-arch – można ograniczyć do amd64 w razie potrzeby
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
          tags: ${{ steps.meta_ui.outputs.tags }}
          labels: ${{ steps.meta_ui.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Build API image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Compose config validation
        run: |
          if [ -f infra/docker-compose.yml ]; then
            docker compose -f infra/docker-compose.yml config
          else
            echo "No infra/docker-compose.yml found – skipping validation."
          fi
