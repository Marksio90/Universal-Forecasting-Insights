name: ci-cd

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:

# Anuluj starsze runy dla tej samej gałęzi
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write   # wymagane do pushu do GHCR

env:
  REGISTRY: ghcr.io
  IMAGE_UI: ${{ github.repository_owner }}/datagenius-ui
  IMAGE_API: ${{ github.repository_owner }}/datagenius-api

jobs:
  lint-test:
    name: Lint & Smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.11 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt

      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # opcjonalnie narzędzia (nie blokują pipeline'u)
          pip install ruff mypy pytest || true

      - name: Lint smoke
        run: |
          python - <<'PY'
          print("ok")
          PY
      - name: (optional) Ruff & Mypy & Pytest
        run: |
          ruff check . || true
          mypy || true
          pytest -q || echo "no tests"

  build-images:
    name: Build Docker images (UI+API)
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Buildx dla multi-arch i cache GHA
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # GHCR login (token systemowy)
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Meta dla UI
      - name: Docker meta (UI)
        id: meta_ui
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_UI }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      # Meta dla API
      - name: Docker meta (API)
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      # Build UI (ta sama Dockerfile, inny tag – jak w compose)
      - name: Build UI
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_ui.outputs.tags }}
          labels: ${{ steps.meta_ui.outputs.labels }}
          annotations: ${{ steps.meta_ui.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      # Build API (ten sam obraz bazowy; w prod override CMD w compose)
      - name: Build API
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          annotations: ${{ steps.meta_api.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      # Kontrola, czy docker-compose składa stack (bez uruchamiania)
      - name: Compose config check
        run: docker compose -f infra/docker-compose.yml config

  # (Opcjonalnie) tylko na tagach zrób release-notes / assets
  release:
    name: Release (notes & attach)
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Release notes
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
